<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\CertificateTemplate;
use App\Models\StudentHonor;
use App\Models\GeneratedCertificate;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;

class StudentController extends Controller
{
    public function index()
    {
        $student = Auth::user();
        $studentProfile = $student->studentProfile;
        
        // Get student's honors
        $honors = StudentHonor::where('student_id', $student->id)
            ->where('is_approved', true)
            ->with('academicPeriod')
            ->orderBy('awarded_date', 'desc')
            ->get();

        // Get student's certificates
        $certificates = GeneratedCertificate::where('student_id', $student->id)
            ->with('certificateTemplate')
            ->orderBy('created_at', 'desc')
            ->get();

        return Inertia::render('Student/StudentDashboard', [
            'student' => $student,
            'studentProfile' => $studentProfile,
            'honors' => $honors,
            'certificates' => $certificates,
        ]);
    }

    public function certificateSelection()
    {
        $student = Auth::user();
        $studentProfile = $student->studentProfile;
        
        if (!$studentProfile) {
            return redirect()->back()->with('error', 'Student profile not found.');
        }

        // Get student's approved honors
        $honors = StudentHonor::where('student_id', $student->id)
            ->where('is_approved', true)
            ->with('academicPeriod')
            ->orderBy('awarded_date', 'desc')
            ->get();

        if ($honors->isEmpty()) {
            return redirect()->back()->with('error', 'No approved honors found. You need to have approved honors to select certificate templates.');
        }

        // Determine education level
        $isCollege = $studentProfile->college_course_id !== null;
        $academicLevel = $studentProfile->academicLevel;
        
        // Get appropriate certificate templates based on education level
        $templates = CertificateTemplate::where('is_active', true)
            ->where('education_level', $isCollege ? 'college' : 'k12')
            ->orderBy('name')
            ->get();

        return Inertia::render('Student/CertificateSelection', [
            'student' => $student,
            'studentProfile' => $studentProfile,
            'honors' => $honors,
            'templates' => $templates,
            'isCollege' => $isCollege,
        ]);
    }

    public function generateCertificate(Request $request)
    {
        $request->validate([
            'honor_id' => 'required|exists:student_honors,id',
            'template_id' => 'required|exists:certificate_templates,id',
        ]);

        $student = Auth::user();
        $honor = StudentHonor::where('id', $request->honor_id)
            ->where('student_id', $student->id)
            ->where('is_approved', true)
            ->first();

        if (!$honor) {
            return redirect()->back()->with('error', 'Honor not found or not approved.');
        }

        $template = CertificateTemplate::findOrFail($request->template_id);

        // Check if certificate already exists for this honor and template
        $existingCertificate = GeneratedCertificate::where('student_id', $student->id)
            ->where('honor_id', $honor->id)
            ->where('certificate_template_id', $template->id)
            ->first();

        if ($existingCertificate) {
            return redirect()->back()->with('error', 'Certificate already generated for this honor and template.');
        }

        // Create the certificate
        $certificate = GeneratedCertificate::create([
            'student_id' => $student->id,
            'certificate_template_id' => $template->id,
            'honor_id' => $honor->id,
            'academic_period_id' => $honor->academic_period_id,
            'generated_at' => now(),
            'is_active' => true,
            'remarks' => "Generated by student selection for {$honor->honor_type}",
        ]);

        return redirect()->back()->with('success', 'Certificate generated successfully! You can now view and download it.');
    }

    public function viewCertificate(GeneratedCertificate $certificate)
    {
        $student = Auth::user();
        
        // Ensure the student can only view their own certificates
        if ($certificate->student_id !== $student->id) {
            abort(403, 'Unauthorized access to certificate.');
        }

        return Inertia::render('Student/ViewCertificate', [
            'certificate' => $certificate->load(['certificateTemplate', 'honor', 'academicPeriod']),
            'student' => $student,
        ]);
    }
}
