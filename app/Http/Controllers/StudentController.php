<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Models\CertificateTemplate;
use App\Models\StudentHonor;
use App\Models\GeneratedCertificate;
use App\Models\Grade;
use App\Models\AcademicPeriod;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;

class StudentController extends Controller
{
    public function index()
    {
        $student = Auth::user();
        $studentProfile = $student->studentProfile;
        
        // Get student's honors
        $honors = StudentHonor::where('student_id', $student->id)
            ->where('is_approved', true)
            ->with('academicPeriod')
            ->orderBy('awarded_date', 'desc')
            ->get();

        // Get student's certificates
        $certificates = GeneratedCertificate::where('student_id', $student->id)
            ->with('certificateTemplate')
            ->orderBy('created_at', 'desc')
            ->get();

        return Inertia::render('Student/StudentDashboard', [
            'student' => $student,
            'studentProfile' => $studentProfile,
            'honors' => $honors,
            'certificates' => $certificates,
        ]);
    }

    public function certificateSelection()
    {
        $student = Auth::user();
        $studentProfile = $student->studentProfile;
        
        if (!$studentProfile) {
            return redirect()->back()->with('error', 'Student profile not found.');
        }

        // Get student's approved honors
        $honors = StudentHonor::where('student_id', $student->id)
            ->where('is_approved', true)
            ->with('academicPeriod')
            ->orderBy('awarded_date', 'desc')
            ->get();

        if ($honors->isEmpty()) {
            return redirect()->back()->with('error', 'No approved honors found. You need to have approved honors to select certificate templates.');
        }

        // Determine education level
        $isCollege = $studentProfile->college_course_id !== null;
        $academicLevel = $studentProfile->academicLevel;
        
        // Get appropriate certificate templates based on education level
        $templates = CertificateTemplate::where('is_active', true)
            ->where('education_level', $isCollege ? 'college' : 'k12')
            ->orderBy('name')
            ->get();

        return Inertia::render('Student/CertificateSelection', [
            'student' => $student,
            'studentProfile' => $studentProfile,
            'honors' => $honors,
            'templates' => $templates,
            'isCollege' => $isCollege,
        ]);
    }

    public function generateCertificate(Request $request)
    {
        $request->validate([
            'honor_id' => 'required|exists:student_honors,id',
            'template_id' => 'required|exists:certificate_templates,id',
        ]);

        $student = Auth::user();
        $honor = StudentHonor::where('id', $request->honor_id)
            ->where('student_id', $student->id)
            ->where('is_approved', true)
            ->first();

        if (!$honor) {
            return redirect()->back()->with('error', 'Honor not found or not approved.');
        }

        $template = CertificateTemplate::findOrFail($request->template_id);

        // Check if certificate already exists for this honor and template
        $existingCertificate = GeneratedCertificate::where('student_id', $student->id)
            ->where('honor_id', $honor->id)
            ->where('certificate_template_id', $template->id)
            ->first();

        if ($existingCertificate) {
            return redirect()->back()->with('error', 'Certificate already generated for this honor and template.');
        }

        // Create the certificate
        $certificate = GeneratedCertificate::create([
            'student_id' => $student->id,
            'certificate_template_id' => $template->id,
            'honor_id' => $honor->id,
            'academic_period_id' => $honor->academic_period_id,
            'generated_at' => now(),
            'is_active' => true,
            'remarks' => "Generated by student selection for {$honor->honor_type}",
        ]);

        return redirect()->back()->with('success', 'Certificate generated successfully! You can now view and download it.');
    }

    public function viewCertificate(GeneratedCertificate $certificate)
    {
        $student = Auth::user();
        
        // Ensure the student can only view their own certificates
        if ($certificate->student_id !== $student->id) {
            abort(403, 'Unauthorized access to certificate.');
        }

        return Inertia::render('Student/ViewCertificate', [
            'certificate' => $certificate->load(['certificateTemplate', 'honor', 'academicPeriod']),
            'student' => $student,
        ]);
    }

    public function grades(Request $request)
    {
        $student = Auth::user();
        $academicPeriodId = $request->get('academic_period_id');
        
        // Get all academic periods for the filter dropdown
        $academicPeriods = AcademicPeriod::orderBy('school_year', 'desc')
            ->orderBy('name')
            ->get();

        // Build the grades query
        $query = Grade::where('student_id', $student->id)
            ->with(['subject', 'academicPeriod', 'instructor'])
            ->where('status', 'approved'); // Only show approved grades to students

        // Apply academic period filter if selected
        if ($academicPeriodId) {
            $query->where('academic_period_id', $academicPeriodId);
        }

        $grades = $query->orderBy('created_at', 'desc')
            ->get()
            ->map(function ($grade) use ($academicPeriodId, $academicPeriods) {
                // Determine if this is a semester-specific period
                $selectedPeriod = null;
                if ($academicPeriodId) {
                    $selectedPeriod = $academicPeriods->find($academicPeriodId);
                }
                
                $isSemesterSpecific = false;
                $semesterType = null;
                if ($selectedPeriod) {
                    $periodName = strtolower($selectedPeriod->name);
                    if (str_contains($periodName, '1st') || str_contains($periodName, 'first')) {
                        $isSemesterSpecific = true;
                        $semesterType = '1st';
                    } elseif (str_contains($periodName, '2nd') || str_contains($periodName, 'second')) {
                        $isSemesterSpecific = true;
                        $semesterType = '2nd';
                    }
                }

                // Prepare grade data based on student type and semester selection
                $gradeData = [
                    'id' => $grade->id,
                    'subject' => [
                        'id' => $grade->subject->id,
                        'name' => $grade->subject->name,
                        'code' => $grade->subject->code,
                        'units' => $grade->subject->units,
                    ],
                    'academic_period' => [
                        'id' => $grade->academicPeriod->id,
                        'name' => $grade->academicPeriod->name,
                        'school_year' => $grade->academicPeriod->school_year,
                    ],
                    'instructor' => [
                        'name' => $grade->instructor->name ?? 'N/A',
                    ],
                    'student_type' => $grade->student_type,
                    'overall_grade' => $grade->overall_grade,
                    'remarks' => $grade->remarks,
                    'submitted_at' => $grade->created_at->format('M d, Y'),
                ];

                // Add semester-specific grade details based on selection and student type
                if ($grade->student_type === 'college') {
                    if (!$isSemesterSpecific || $semesterType === '1st') {
                        $gradeData['1st_semester'] = [
                            'midterm' => $grade->{'1st_semester_midterm'},
                            'pre_final' => $grade->{'1st_semester_pre_final'},
                            'final' => $grade->{'1st_semester_final'},
                        ];
                    }
                    if (!$isSemesterSpecific || $semesterType === '2nd') {
                        $gradeData['2nd_semester'] = [
                            'midterm' => $grade->{'2nd_semester_midterm'},
                            'pre_final' => $grade->{'2nd_semester_pre_final'},
                            'final' => $grade->{'2nd_semester_final'},
                        ];
                    }
                } else {
                    // For K-12 students
                    if ($grade->student_type === 'senior_high') {
                        // Senior High: semesters based on grading periods
                        if (!$isSemesterSpecific || $semesterType === '1st') {
                            $gradeData['1st_semester'] = [
                                '1st_grading' => $grade->{'1st_grading'},
                                '2nd_grading' => $grade->{'2nd_grading'},
                            ];
                        }
                        if (!$isSemesterSpecific || $semesterType === '2nd') {
                            $gradeData['2nd_semester'] = [
                                '3rd_grading' => $grade->{'3rd_grading'},
                                '4th_grading' => $grade->{'4th_grading'},
                            ];
                        }
                    } else {
                        // Elementary/Junior High: all quarters
                        $gradeData['quarters'] = [
                            '1st_grading' => $grade->{'1st_grading'},
                            '2nd_grading' => $grade->{'2nd_grading'},
                            '3rd_grading' => $grade->{'3rd_grading'},
                            '4th_grading' => $grade->{'4th_grading'},
                        ];
                    }
                }

                return $gradeData;
            });

        return Inertia::render('Student/Grades', [
            'grades' => $grades,
            'academicPeriods' => $academicPeriods,
            'filters' => $request->only(['academic_period_id']),
        ]);
    }
}
